openapi: 3.0.3
info:
  title: AutoFish API
  version: 1.0.0
  description: API documentation for the AutoFish producer-consumer platform
paths:
  /api/users/:
    get:
      operationId: list_all_users
      description: "\n        Retrieve list of all user accounts. Admin-only endpoint\
        \ with comprehensive filtering and search capabilities.\n        \n      \
        \  Regular users see only their own account. Admins see all users with full\
        \ details and can filter by user type, status, and other criteria.\n     \
        \   "
      summary: List All Users
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: List of user accounts with pagination
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InsufficientPermissions:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Insufficient Permissions
          description: Admin privileges required
    post:
      operationId: create_user_account
      description: "\n        Create a new user account. Admin-only endpoint for manual\
        \ user creation with full control over account settings.\n        \n     \
        \   Supports creating any user type (consumer/producer/admin) with custom\
        \ verification and activation status.\n        "
      summary: Create User Account
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User account created successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    email:
                    - User with this email already exists.
                    password:
                    - This password is too weak.
                  summary: Validation Errors
          description: Validation errors in request data
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InsufficientPermissions:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Insufficient Permissions
          description: Admin privileges required
  /api/users/consumers/:
    get:
      operationId: list_consumers
      description: "\n        Retrieve list of all consumer accounts with activity\
        \ metrics and public profile information.\n        \n        Email addresses\
        \ and sensitive information are filtered based on user permissions. Includes\
        \ engagement statistics and account status.\n        "
      summary: List All Consumers
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                ConsumersList:
                  value:
                  - - id: 2
                      first_name: Marie
                      last_name: Martin
                      user_type: consumer
                      is_verified: true
                      consumer_profile:
                        id: 1
                        favorites_count: 3
                    - id: 4
                      first_name: Sophie
                      last_name: Bernard
                      user_type: consumer
                      is_verified: true
                      consumer_profile:
                        id: 2
                        favorites_count: 1
                  summary: Consumers List
          description: List of consumer accounts
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/users/me/:
    get:
      operationId: get_current_user
      description: "\n        Retrieve complete profile information for currently\
        \ authenticated user including account type, verification status, and associated\
        \ profiles.\n        \n        Returns different data based on user type (consumer/producer/admin)\
        \ with appropriate privacy controls.\n        "
      summary: Get Current User Profile
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                ProducerProfile:
                  value:
                    id: 1
                    email: producer@example.com
                    first_name: Jean
                    last_name: Dupont
                    user_type: producer
                    is_verified: true
                    email_verified: true
                    is_active: true
                    date_joined: '2024-01-15T10:30:00Z'
                    producer_profile:
                      id: 1
                      verification_status: verified
                  summary: Producer Profile
                ConsumerProfile:
                  value:
                    id: 2
                    email: consumer@example.com
                    first_name: Marie
                    last_name: Martin
                    user_type: consumer
                    is_verified: true
                    email_verified: true
                    is_active: true
                    date_joined: '2024-01-20T14:15:00Z'
                    consumer_profile:
                      id: 1
                      favorites_count: 3
                  summary: Consumer Profile
          description: Current user profile data
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: User not authenticated
  /api/users/producers/:
    get:
      operationId: list_producers
      description: "\n        Retrieve list of all producer accounts with their verification\
        \ status, business information, and public profile data.\n        \n     \
        \   Supports filtering by verification status, location, and sorting by various\
        \ criteria. Pagination included for large result sets.\n        "
      summary: List All Producers
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                ProducersList:
                  value:
                  - - id: 1
                      email: producer1@example.com
                      first_name: Jean
                      last_name: Dupont
                      user_type: producer
                      is_verified: true
                      producer_profile:
                        id: 1
                        verification_status: verified
                    - id: 3
                      email: producer2@example.com
                      first_name: Pierre
                      last_name: Martin
                      user_type: producer
                      is_verified: false
                      producer_profile:
                        id: 2
                        verification_status: pending
                  summary: Producers List
          description: List of producer accounts
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/users/update_me/:
    patch:
      operationId: update_current_user
      description: "\n        Update profile information for currently authenticated\
        \ user. Supports both PUT (complete update) and PATCH (partial update).\n\
        \        \n        Protected fields like email, user_type, and verification\
        \ status cannot be updated through this endpoint.\n        "
      summary: Update Current User Profile
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Profile updated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    first_name:
                    - Name can only contain letters.
                    email:
                    - Email cannot be updated through this endpoint.
                  summary: Validation Errors
          description: Validation errors in submitted data
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: User not authenticated
    put:
      operationId: update_current_user_2
      description: "\n        Update profile information for currently authenticated\
        \ user. Supports both PUT (complete update) and PATCH (partial update).\n\
        \        \n        Protected fields like email, user_type, and verification\
        \ status cannot be updated through this endpoint.\n        "
      summary: Update Current User Profile
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Profile updated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    first_name:
                    - Name can only contain letters.
                    email:
                    - Email cannot be updated through this endpoint.
                  summary: Validation Errors
          description: Validation errors in submitted data
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: User not authenticated
  /api/users/{id}/:
    get:
      operationId: get_user_details
      description: "\n        Retrieve detailed information for a specific user account.\
        \ Users can only access their own details, admins can access any user.\n \
        \       \n        Returns complete profile information including account status,\
        \ verification details, and associated producer/consumer profiles.\n     \
        \   "
      summary: Get User Details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User account details
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to view this user.
                  summary: Access Denied
          description: Can only view own account or admin privileges required
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                UserNotFound:
                  value:
                    detail: Not found.
                  summary: User Not Found
          description: User does not exist
    patch:
      operationId: partial_update_user
      description: "\n        Partial update of user account information. Only provided\
        \ fields will be updated, others remain unchanged.\n        \n        Users\
        \ can update their own accounts, admins can update any account. More flexible\
        \ than full update for specific field changes.\n        "
      summary: Partial Update User Account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User account updated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    email:
                    - User with this email already exists.
                    first_name:
                    - Name can only contain letters.
                  summary: Validation Errors
          description: Validation errors in request data
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to modify this user.
                  summary: Access Denied
          description: Can only update own account or admin privileges required
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                UserNotFound:
                  value:
                    detail: Not found.
                  summary: User Not Found
          description: User does not exist
    delete:
      operationId: delete_user_account
      description: "\n        Permanently delete a user account and all associated\
        \ data. Users can delete their own accounts, admins can delete any account.\n\
        \        \n        This action is irreversible and will remove all user data,\
        \ orders, messages, and related information from the system.\n        "
      summary: Delete User Account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '204':
          description: User account deleted successfully
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to delete this user.
                  summary: Access Denied
          description: Can only delete own account or admin privileges required
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                UserNotFound:
                  value:
                    detail: Not found.
                  summary: User Not Found
          description: User does not exist
    put:
      operationId: update_user_account
      description: "\n        Complete update of user account information. Users can\
        \ update their own accounts, admins can update any account.\n        \n  \
        \      Requires all user fields to be provided. Use PATCH for partial updates.\
        \ Some fields may be restricted based on user permissions.\n        "
      summary: Update User Account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User account updated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    email:
                    - Enter a valid email address.
                    first_name:
                    - This field is required.
                  summary: Validation Errors
          description: Validation errors in request data
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to modify this user.
                  summary: Access Denied
          description: Can only update own account or admin privileges required
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                UserNotFound:
                  value:
                    detail: Not found.
                  summary: User Not Found
          description: User does not exist
  /api/users/{id}/block_user/:
    post:
      operationId: admin_block_user
      description: "\n        Administrative endpoint to block user accounts. Prevents\
        \ login and suspends all platform services.\n        \n        Blocked users\
        \ cannot login, access API, or use any platform features. Requires admin privileges.\n\
        \        "
      summary: 'Admin: Block User Account'
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BlockSuccess:
                  value:
                    message: User 'user@example.com' has been blocked
                  summary: Block Success
          description: User account blocked successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AlreadyBlocked:
                  value:
                    error: User is already blocked.
                  summary: Already Blocked
          description: User account already blocked
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InsufficientPermissions:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Insufficient Permissions
          description: Admin privileges required
  /api/users/{id}/toggle_favorite/:
    post:
      operationId: toggle_favorite_producer
      description: "\n        Add or remove a producer from consumer's favorites list.\
        \ Exclusive to consumer accounts with instant toggle functionality.\n    \
        \    \n        Creates consumer profile if needed. Producers get notified\
        \ of new followers (optional). Returns updated favorite status.\n        "
      summary: Toggle Producer as Favorite
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AddedToFavorites:
                  value:
                    status: added to favorites
                  summary: Added to Favorites
                RemovedFromFavorites:
                  value:
                    status: removed from favorites
                  summary: Removed from Favorites
          description: Favorite status updated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAConsumer:
                  value:
                    error: Only consumers can have favorites.
                  summary: Not a Consumer
                NotAProducer:
                  value:
                    error: Can only favorite producers.
                  summary: Not a Producer
          description: Invalid favorite operation
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ProducerNotFound:
                  value:
                    detail: Not found.
                  summary: Producer Not Found
          description: Producer account does not exist
  /api/users/{id}/unblock_user/:
    post:
      operationId: admin_unblock_user
      description: "\n        Administrative endpoint to restore access to blocked\
        \ user accounts. Removes blocking restrictions and restores normal access.\n\
        \        \n        Unblocked users can login and access all platform features\
        \ normally. Requires admin privileges.\n        "
      summary: 'Admin: Unblock User Account'
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                UnblockSuccess:
                  value:
                    message: User 'user@example.com' has been unblocked
                  summary: Unblock Success
          description: User account unblocked successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotBlocked:
                  value:
                    error: User is not currently blocked.
                  summary: Not Blocked
          description: User account is not blocked
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InsufficientPermissions:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Insufficient Permissions
          description: Admin privileges required
  /api/users/{id}/verify_producer/:
    post:
      operationId: admin_verify_producer
      description: "\n        Administrative endpoint to verify producer accounts.\
        \ Creates producer profile and enables producer features.\n        \n    \
        \    Requires admin privileges and target user must be producer type with\
        \ verified email.\n        "
      summary: 'Admin: Verify Producer Account'
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                VerificationSuccess:
                  value:
                    message: Producer 'producer@example.com' has been verified
                  summary: Verification Success
          description: Producer account verified successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAProducer:
                  value:
                    error: User is not a producer.
                  summary: Not a Producer
                AlreadyVerified:
                  value:
                    error: Producer is already verified.
                  summary: Already Verified
          description: Verification failed due to user type or status
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InsufficientPermissions:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Insufficient Permissions
          description: Admin privileges required
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                UserNotFound:
                  value:
                    detail: Not found.
                  summary: User Not Found
          description: User does not exist
  /api/auth/register/:
    post:
      operationId: user_registration
      description: "\n    Register a new user account. Specify user_type as 'producer'\
        \ or 'consumer'. Producers require email verification before activation.\n\
        \    \n    Password must be minimum 8 characters with letters and numbers.\
        \ Consumers are auto-activated, producers receive verification email.\n  \
        \  "
      summary: User Account Registration
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ProducerRegistrationSuccess:
                  value:
                    message: Producer account created. Please check your email to
                      activate your account.
                    user:
                      id: 3
                      email: newproducer@example.com
                      first_name: Pierre
                      last_name: Durand
                      user_type: producer
                      is_verified: false
                      email_verified: false
                      is_active: false
                      date_joined: '2024-01-25T09:45:00Z'
                  summary: Producer Registration Success
                ConsumerRegistrationSuccess:
                  value:
                    message: Consumer account created successfully. You can now log
                      in.
                    user:
                      id: 4
                      email: newconsumer@example.com
                      first_name: Sophie
                      last_name: Bernard
                      user_type: consumer
                      is_verified: true
                      email_verified: true
                      is_active: true
                      date_joined: '2024-01-25T09:45:00Z'
                  summary: Consumer Registration Success
          description: Account created successfully. Check response message for next
            steps.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                EmailAlreadyExists:
                  value:
                    email:
                    - User with this email already exists.
                  summary: Email Already Exists
                PasswordMismatch:
                  value:
                    non_field_errors:
                    - Passwords do not match.
                  summary: Password Mismatch
                WeakPassword:
                  value:
                    password:
                    - This password is too short. It must contain at least 8 characters.
                    - This password is too common.
                    - This password is entirely numeric.
                  summary: Weak Password
                InvalidEmailFormat:
                  value:
                    email:
                    - Enter a valid email address.
                  summary: Invalid Email Format
                MissingRequiredFields:
                  value:
                    email:
                    - This field is required.
                    first_name:
                    - This field is required.
                    user_type:
                    - This field is required.
                    password:
                    - This field is required.
                  summary: Missing Required Fields
                InvalidUserType:
                  value:
                    user_type:
                    - '"admin" is not a valid choice.'
                  summary: Invalid User Type
          description: Registration failed due to validation errors.
        '429':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                RateLimited:
                  value:
                    detail: Too many registration attempts. Please try again in 10
                      minutes.
                    retry_after: 600
                  summary: Rate Limited
          description: Too many registration attempts from this IP address.
  /api/auth/login/:
    post:
      operationId: user_login
      description: "\n    Authenticate user with email and password credentials. Returns\
        \ JWT access and refresh tokens along with user profile data.\n    \n    Access\
        \ tokens expire after 15 minutes, refresh tokens after 7 days. Rate limited\
        \ to 5 attempts per minute for security.\n    "
      summary: User Authentication
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SuccessfulProducerLogin:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 1
                      email: producer@example.com
                      first_name: Jean
                      last_name: Dupont
                      user_type: producer
                      is_verified: true
                      email_verified: true
                      is_active: true
                      date_joined: '2024-01-15T10:30:00Z'
                  summary: Successful Producer Login
                SuccessfulConsumerLogin:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 2
                      email: consumer@example.com
                      first_name: Marie
                      last_name: Martin
                      user_type: consumer
                      is_verified: true
                      email_verified: true
                      is_active: true
                      date_joined: '2024-01-20T14:15:00Z'
                  summary: Successful Consumer Login
          description: Authentication successful. JWT tokens and user data returned.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MissingCredentials:
                  value:
                    email:
                    - This field is required.
                    password:
                    - This field is required.
                  summary: Missing Credentials
                InvalidEmailFormat:
                  value:
                    email:
                    - Enter a valid email address.
                  summary: Invalid Email Format
                AccountNotActivated:
                  value:
                    detail: Account is not activated. Please check your email for
                      verification link.
                  summary: Account Not Activated
                AccountBlocked:
                  value:
                    detail: Your account has been temporarily blocked. Contact support
                      for assistance.
                  summary: Account Blocked
          description: Bad request - Missing fields, invalid input, or account issues.
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InvalidCredentials:
                  value:
                    detail: No active account found with the given credentials
                  summary: Invalid Credentials
                IncorrectPassword:
                  value:
                    detail: Unable to log in with provided credentials.
                  summary: Incorrect Password
          description: Authentication failed - Invalid email or password.
        '429':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                RateLimited:
                  value:
                    detail: Too many login attempts. Please try again in 5 minutes.
                    retry_after: 300
                  summary: Rate Limited
          description: Too many requests - Rate limit exceeded.
  /api/auth/logout/:
    post:
      operationId: user_logout
      description: "\n    Logout user by blacklisting their refresh token. Token becomes\
        \ permanently invalid and cannot be reused.\n    \n    Access tokens remain\
        \ valid until expiration (15 minutes max). Client should clear local token\
        \ storage.\n    "
      summary: User Session Logout
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              LogoutRequest:
                value:
                  refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Logout Request
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                LogoutRequest:
                  value:
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                  summary: Logout Request
                LogoutSuccess:
                  value:
                    detail: Logout successful.
                  summary: Logout Success
          description: User logged out successfully. Refresh token blacklisted.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MissingRefreshToken:
                  value:
                    detail: Refresh token is required.
                  summary: Missing Refresh Token
                InvalidTokenFormat:
                  value:
                    detail: Token is not valid.
                  summary: Invalid Token Format
                AlreadyBlacklisted:
                  value:
                    detail: Token is already blacklisted.
                  summary: Already Blacklisted
          description: Logout failed due to missing or invalid refresh token.
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AuthenticationRequired:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Authentication Required
          description: User not authenticated.
  /api/auth/token/refresh/:
    post:
      operationId: refresh_access_token
      description: "\n    Refresh JWT access token using a valid refresh token. Extends\
        \ token lifetime without re-authentication.\n    \n    Use this endpoint before\
        \ access token expires to maintain session continuity.\n    "
      summary: Refresh Access Token
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              TokenRefreshRequest:
                value:
                  refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                summary: Token Refresh Request
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                TokenRefreshRequest:
                  value:
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                  summary: Token Refresh Request
                SuccessfulTokenRefresh:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                  summary: Successful Token Refresh
          description: Token refresh successful. New access token returned.
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InvalidRefreshToken:
                  value:
                    detail: Token is invalid or expired
                    code: token_not_valid
                  summary: Invalid Refresh Token
                BlacklistedToken:
                  value:
                    detail: Token is blacklisted
                    code: token_not_valid
                  summary: Blacklisted Token
          description: Invalid, expired, or blacklisted refresh token.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MissingRefreshToken:
                  value:
                    refresh:
                    - This field is required.
                  summary: Missing Refresh Token
          description: Bad request - Missing refresh token.
  /api/auth/change-password/:
    post:
      operationId: change_password
      description: "\n    Change password for currently authenticated user. Requires\
        \ current password verification and new password meeting security requirements.\n\
        \    \n    New password must be minimum 8 characters with letters and numbers.\
        \ Rate limited to 5 attempts per hour per user.\n    "
      summary: Change User Password
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                PasswordChangeSuccess:
                  value:
                    detail: Password changed successfully.
                  summary: Password Change Success
          description: Password updated successfully.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                IncorrectCurrentPassword:
                  value:
                    current_password:
                    - Incorrect password.
                  summary: Incorrect Current Password
                WeakNewPassword:
                  value:
                    new_password:
                    - This password is too short. It must contain at least 8 characters.
                    - This password is too common.
                  summary: Weak New Password
                PasswordMismatch:
                  value:
                    new_password2:
                    - The two password fields didn't match.
                  summary: Password Mismatch
                MissingFields:
                  value:
                    current_password:
                    - This field is required.
                    new_password:
                    - This field is required.
                  summary: Missing Fields
          description: Password change failed due to validation errors.
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AuthenticationRequired:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Authentication Required
          description: User not authenticated.
        '429':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                RateLimited:
                  value:
                    detail: Too many password change attempts. Please try again later.
                  summary: Rate Limited
          description: Rate limit exceeded for password changes.
  /api/verify-email/{token}/:
    get:
      operationId: verify_email_address
      description: "\n    Verify user's email address using verification token sent\
        \ via email. Activates producer accounts after successful verification.\n\
        \    \n    Tokens are single-use and expire after 24 hours. Already verified\
        \ accounts return success status.\n    "
      summary: Email Address Verification
      parameters:
      - in: path
        name: token
        schema:
          type: string
          format: uuid
        description: Email verification token received via email
        required: true
        examples:
          ValidToken:
            value: 123e4567-e89b-12d3-a456-426614174000
            summary: Valid Token
      tags:
      - Authentication
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                VerificationSuccess:
                  value:
                    message: Email verified successfully. Your account is now active.
                  summary: Verification Success
                AlreadyVerified:
                  value:
                    message: Email already verified.
                  summary: Already Verified
          description: Email verification completed successfully.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InvalidToken:
                  value:
                    error: Invalid verification token.
                  summary: Invalid Token
                ExpiredToken:
                  value:
                    error: Verification token has expired. Please request a new verification
                      email.
                  summary: Expired Token
          description: Verification failed due to invalid or expired token.
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                TokenNotFound:
                  value:
                    error: Verification token not found or already used.
                  summary: Token Not Found
          description: Verification token does not exist in system.
  /api/resend-verification-email/:
    post:
      operationId: resend_verification_email
      description: "\n    Resend verification email for unverified producer accounts.\
        \ Generates new token and invalidates previous one.\n    \n    Rate limited\
        \ to 3 requests per hour per email address to prevent abuse.\n    "
      summary: Resend Email Verification
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              ResendRequest:
                value:
                  email: producer@example.com
                summary: Resend Request
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ResendRequest:
                  value:
                    email: producer@example.com
                  summary: Resend Request
                ResendSuccess:
                  value:
                    message: Verification email resent successfully.
                  summary: Resend Success
          description: Verification email sent to provided address.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MissingEmail:
                  value:
                    error: Email is required.
                  summary: Missing Email
                AlreadyVerified:
                  value:
                    message: Email already verified.
                  summary: Already Verified
                NoUserFound:
                  value:
                    error: No user with this email exists.
                  summary: No User Found
                InvalidEmailFormat:
                  value:
                    error: Please enter a valid email address.
                  summary: Invalid Email Format
          description: Request failed due to validation errors or account issues.
        '429':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                RateLimited:
                  value:
                    error: Too many verification emails sent. Please wait before requesting
                      another.
                    retry_after: 600
                  summary: Rate Limited
          description: Rate limit exceeded for verification requests.
  /api/auth/forgot-password/:
    post:
      operationId: request_password_reset
      description: "\n    Request password reset by email for forgotten passwords.\
        \ Sends secure reset link to registered email addresses.\n    \n    Reset\
        \ tokens expire after 1 hour. For security, response doesn't reveal if email\
        \ exists in system. Rate limited to 3 requests per hour per email.\n    "
      summary: Request Password Reset
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              PasswordResetRequest:
                value:
                  email: user@example.com
                summary: Password Reset Request
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                PasswordResetRequest:
                  value:
                    email: user@example.com
                  summary: Password Reset Request
                ResetEmailSent:
                  value:
                    message: Password reset email sent successfully.
                  summary: Reset Email Sent
                SecurityResponse:
                  value:
                    message: If this email exists, a password reset link has been
                      sent.
                  summary: Security Response
          description: Password reset process initiated.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MissingEmail:
                  value:
                    error: Email is required.
                  summary: Missing Email
                InvalidEmailFormat:
                  value:
                    error: Please enter a valid email address.
                  summary: Invalid Email Format
          description: Request failed due to missing or invalid email.
        '429':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                RateLimited:
                  value:
                    error: Too many reset requests. Please wait before trying again.
                    retry_after: 1800
                  summary: Rate Limited
          description: Rate limit exceeded for password reset requests.
  /api/auth/reset-password/:
    post:
      operationId: reset_password_confirm
      description: "\n    Complete password reset using token from email. Token is\
        \ single-use and expires after 1 hour.\n    \n    New password must meet security\
        \ requirements (minimum 8 characters with letters and numbers). Token is invalidated\
        \ after successful reset.\n    "
      summary: Reset Password with Token
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              PasswordReset:
                value:
                  token: 123e4567-e89b-12d3-a456-426614174000
                  new_password: NewSecurePassword123!
                  new_password2: NewSecurePassword123!
                summary: Password Reset
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                PasswordReset:
                  value:
                    token: 123e4567-e89b-12d3-a456-426614174000
                    new_password: NewSecurePassword123!
                    new_password2: NewSecurePassword123!
                  summary: Password Reset
                ResetSuccess:
                  value:
                    message: Password reset successfully.
                  summary: Reset Success
          description: Password reset completed successfully.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MissingFields:
                  value:
                    error: Token, new password and password confirmation are required.
                  summary: Missing Fields
                PasswordMismatch:
                  value:
                    error: Passwords do not match.
                  summary: Password Mismatch
                WeakPassword:
                  value:
                    error: Password must be at least 8 characters long.
                  summary: Weak Password
                InvalidToken:
                  value:
                    error: Invalid or expired reset token.
                  summary: Invalid Token
          description: Password reset failed due to validation errors or invalid token.
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                TokenNotFound:
                  value:
                    error: Password reset token not found or already used.
                  summary: Token Not Found
          description: Reset token does not exist or was consumed.
  /api/auth/create-admin/:
    post:
      operationId: create_admin_account
      description: "\n    Super-Admin endpoint to create new administrative accounts\
        \ with role assignment. Auto-verifies and activates admin accounts.\n    \n\
        \    Supports Admin and Super-Admin roles with appropriate privileges. Requires\
        \ super-admin privileges for account creation.\n    "
      summary: Create Admin Account
      tags:
      - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              CreateAdmin:
                value:
                  email: admin@example.com
                  password: SecureAdminPassword123!
                  name: John Administrator
                  role: Admin
                summary: Create Admin
              CreateSuper-Admin:
                value:
                  email: superadmin@example.com
                  password: SuperSecurePassword123!
                  name: Jane Super Admin
                  role: Super-Admin
                summary: Create Super-Admin
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                CreateAdmin:
                  value:
                    email: admin@example.com
                    password: SecureAdminPassword123!
                    name: John Administrator
                    role: Admin
                  summary: Create Admin
                CreateSuper-Admin:
                  value:
                    email: superadmin@example.com
                    password: SuperSecurePassword123!
                    name: Jane Super Admin
                    role: Super-Admin
                  summary: Create Super-Admin
                AdminCreated:
                  value:
                    message: Admin account created successfully.
                    admin:
                      id: 5
                      email: admin@example.com
                      name: John Administrator
                      role: Admin
                  summary: Admin Created
                Super-AdminCreated:
                  value:
                    message: Admin account created successfully.
                    admin:
                      id: 6
                      email: superadmin@example.com
                      name: Jane Super Admin
                      role: Super-Admin
                  summary: Super-Admin Created
          description: Admin account created successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                EmailExists:
                  value:
                    email:
                    - User with this email already exists.
                  summary: Email Exists
                WeakPassword:
                  value:
                    password:
                    - This password is too short. It must contain at least 8 characters.
                    - This password is too common.
                  summary: Weak Password
                MissingFields:
                  value:
                    email:
                    - This field is required.
                    password:
                    - This field is required.
                  summary: Missing Fields
          description: Account creation failed due to validation errors
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InsufficientPermissions:
                  value:
                    detail: Only super administrators can create admin accounts.
                  summary: Insufficient Permissions
          description: Super-admin privileges required
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/hello/:
    get:
      operationId: api_health_check
      description: "\n    Health check endpoint for API monitoring and status verification.\
        \ Returns operational status and basic system information.\n    \n    Used\
        \ by load balancers, monitoring systems, and deployment validation. No authentication\
        \ required.\n    "
      summary: API Health Check
      tags:
      - Health Check
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                APIHealthy:
                  value:
                    message: Hello, AutoFish API is running!
                    status: healthy
                    timestamp: '2024-01-25T10:30:00Z'
                    version: 1.0.0
                  summary: API Healthy
          description: API is operational and healthy
        '503':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ServiceUnavailable:
                  value:
                    message: Service temporarily unavailable
                    status: degraded
                    timestamp: '2024-01-25T10:30:00Z'
                  summary: Service Unavailable
          description: API experiencing issues
  /api/producers/categories/:
    get:
      operationId: producers_categories_list
      description: |-
        Récupère toutes les catégories disponibles avec support de recherche par nom et description.
        Accessible en lecture seule pour tous les utilisateurs authentifiés.
      summary: Lister les Catégories
      parameters:
      - in: query
        name: search
        schema:
          type: string
        description: Recherche textuelle dans le nom et la description des catégories
        examples:
          RechercheFruits:
            value: fruits
            summary: Recherche fruits
          RechercheBio:
            value: bio
            summary: Recherche bio
      tags:
      - Categories
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Liste des catégories récupérée avec succès
        '401':
          description: Non authentifié
    post:
      operationId: producers_categories_create
      description: |-
        Crée une nouvelle catégorie de produits (réservé aux administrateurs).
        Le slug est généré automatiquement à partir du nom si non fourni.
      summary: Créer une Catégorie
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  description: Nom unique de la catégorie
                  example: Produits Artisanaux
                slug:
                  type: string
                  maxLength: 100
                  description: Identifiant URL (optionnel, généré automatiquement)
                  example: produits-artisanaux
                description:
                  type: string
                  description: Description détaillée de la catégorie
                  example: Produits faits main par nos artisans locaux
              required:
              - name
            examples:
              NouvelleCatégorie:
                value:
                  name: Produits Artisanaux
                  description: Produits faits main par nos artisans locaux
                summary: Créer une catégorie artisanale
      security:
      - jwtAuth: []
      responses:
        '201':
          description: Catégorie créée avec succès
        '400':
          description: Données invalides
        '401':
          description: Non authentifié
        '403':
          description: Permission refusée - Réservé aux administrateurs
  /api/producers/categories/categories_summary/:
    get:
      operationId: producers_categories_categories_summary_retrieve
      description: |-
        Récupère toutes les catégories avec leurs statistiques d'engagement et d'activité.
        Inclut le nombre de producteurs, publications, likes et conversations par catégorie.
      summary: Statistiques des Catégories
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Statistiques des catégories récupérées avec succès
        '401':
          description: Non authentifié
  /api/producers/categories/{slug}/:
    get:
      operationId: producers_categories_retrieve
      description: Category management - admins can CRUD, others read-only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: producers_categories_partial_update
      description: Category management - admins can CRUD, others read-only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: producers_categories_destroy
      description: Category management - admins can CRUD, others read-only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Categories
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
    put:
      operationId: producers_categories_update
      description: Category management - admins can CRUD, others read-only
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/producers/pages/:
    get:
      operationId: producers_pages_list
      description: |-
        Récupère toutes les pages producteur visibles avec filtrage par catégories, ville et statut de validation.
        La visibilité dépend du rôle utilisateur (admin voit tout, producteur voit les siennes + validées).
      summary: Lister les Pages Producteur
      parameters:
      - in: query
        name: categories
        schema:
          type: integer
        description: Filtrer par ID de catégorie
        examples:
          FruitsEtLégumes:
            value: 1
            summary: Fruits et légumes
      - in: query
        name: city
        schema:
          type: string
        description: Filtrer par ville
        examples:
          Paris:
            value: Paris
      - in: query
        name: is_validated
        schema:
          type: boolean
        description: Filtrer par statut de validation
        examples:
          ValidéesUniquement:
            value: true
            summary: Validées uniquement
      - in: query
        name: search
        schema:
          type: string
        description: Recherche dans nom, description et ville
        examples:
          RechercheBio:
            value: bio
            summary: Recherche bio
      tags:
      - Producer Pages
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Liste des pages producteur récupérée avec succès
        '401':
          description: Non authentifié
    post:
      operationId: producers_pages_create
      description: |-
        Crée une nouvelle page producteur (réservé aux producteurs vérifiés).
        La page sera soumise pour validation administrative avant publication publique.
      summary: Créer Page Producteur
      tags:
      - Producer Pages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 200
                  description: Nom de la page producteur
                  example: Ferme Bio du Soleil
                description:
                  type: string
                  description: Description détaillée de l'activité
                  example: Producteur de légumes biologiques depuis 15 ans
                city:
                  type: string
                  maxLength: 100
                  description: Ville d'implantation
                  example: Lyon
                categories:
                  type: array
                  items:
                    type: integer
                  description: IDs des catégories de produits
                  example:
                  - 1
                  - 3
              required:
              - name
              - description
              - city
            examples:
              NouvellePageProducteur:
                value:
                  name: Ferme Bio du Soleil
                  description: Producteur de légumes biologiques depuis 15 ans, situé
                    dans la région lyonnaise
                  city: Lyon
                  categories:
                  - 1
                  - 3
                summary: Créer une page ferme bio
      security:
      - jwtAuth: []
      responses:
        '201':
          description: Page producteur créée avec succès (en attente de validation)
        '400':
          description: Données invalides
        '401':
          description: Non authentifié
        '403':
          description: Permission refusée - Réservé aux producteurs vérifiés
  /api/producers/pages/by_category/:
    get:
      operationId: producers_pages_by_category_retrieve
      description: |-
        Récupère toutes les pages producteur validées pour une catégorie spécifique.
        Retourne les informations de la catégorie et la liste des producteurs associés.
      summary: Pages par Catégorie
      parameters:
      - in: query
        name: category_slug
        schema:
          type: string
        description: Slug unique de la catégorie
        required: true
        examples:
          FruitsEtLégumes:
            value: fruits-legumes
            summary: Fruits et légumes
          ProduitsLaitiers:
            value: produits-laitiers
            summary: Produits laitiers
      tags:
      - Producer Pages
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Pages producteur de la catégorie récupérées avec succès
        '400':
          description: Slug de catégorie manquant
        '401':
          description: Non authentifié
        '404':
          description: Catégorie non trouvée
  /api/producers/pages/my_page/:
    get:
      operationId: producers_pages_my_page_retrieve
      description: |-
        Récupère la page producteur de l'utilisateur authentifié actuel.
        Permet au producteur de consulter sa propre page, même si elle n'est pas encore validée.
      summary: Ma Page Producteur
      tags:
      - Producer Pages
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Page producteur de l'utilisateur récupérée avec succès
        '401':
          description: Non authentifié
        '403':
          description: Permission refusée - Réservé aux producteurs
        '404':
          description: Aucune page producteur créée
  /api/producers/pages/{slug}/:
    get:
      operationId: producers_pages_retrieve
      description: Producer page management
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Producer Pages
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerPage'
          description: ''
    patch:
      operationId: producers_pages_partial_update
      description: Producer page management
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Producer Pages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProducerPageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProducerPageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProducerPageRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerPage'
          description: ''
    delete:
      operationId: producers_pages_destroy
      description: Producer page management
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Producer Pages
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
    put:
      operationId: producers_pages_update
      description: Producer page management
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Producer Pages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProducerPageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProducerPageRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerPage'
          description: ''
  /api/producers/pages/{slug}/validate_page/:
    post:
      operationId: producers_pages_validate_page_create
      description: |-
        Valide officiellement une page producteur pour la rendre publique (réservé aux administrateurs).
        Une fois validée, la page apparaîtra dans les résultats publics et pourra recevoir des commandes.
      summary: Valider une Page
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProducerPageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProducerPageRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Page producteur validée avec succès
        '401':
          description: Non authentifié
        '403':
          description: Permission refusée - Réservé aux administrateurs
        '404':
          description: Page producteur non trouvée
  /api/producers/publications/:
    get:
      operationId: producers_publications_list
      description: |-
        Récupère toutes les publications visibles avec filtrage par page, statut de validation et catégorie.
        La visibilité dépend du rôle utilisateur (admin voit tout, producteur voit les siennes + validées).
      summary: Lister les Publications
      parameters:
      - in: query
        name: category
        schema:
          type: integer
        description: Filtrer par ID de catégorie
        examples:
          FruitsEtLégumes:
            value: 1
            summary: Fruits et légumes
      - in: query
        name: is_valid
        schema:
          type: boolean
        description: Filtrer par statut de validation
        examples:
          ValidéesUniquement:
            value: true
            summary: Validées uniquement
      - in: query
        name: page
        schema:
          type: integer
        description: Filtrer par ID de page producteur
        examples:
          PublicationsDeLaPage5:
            value: 5
            summary: Publications de la page 5
      - in: query
        name: search
        schema:
          type: string
        description: Recherche dans titre, description et localisation
        examples:
          RechercheTomates:
            value: tomates
            summary: Recherche tomates
      tags:
      - Publications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Liste des publications récupérée avec succès
        '401':
          description: Non authentifié
    post:
      operationId: producers_publications_create
      description: Publication management for producers
      tags:
      - Publications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
  /api/producers/publications/my_publications/:
    get:
      operationId: producers_publications_my_publications_retrieve
      description: |-
        Récupère toutes les publications créées par le producteur authentifié actuel.
        Inclut toutes les publications, qu'elles soient validées ou en attente de validation.
      summary: Mes Publications
      tags:
      - Producer Pages
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Publications du producteur récupérées avec succès
        '401':
          description: Non authentifié
        '403':
          description: Permission refusée - Réservé aux producteurs
  /api/producers/publications/posts_summary/:
    get:
      operationId: producers_publications_posts_summary_retrieve
      description: |-
        Récupère toutes les publications validées avec leurs statistiques d'engagement pour analyse globale.
        Fournit une vue d'ensemble de l'activité de la plateforme triée par date de création décroissante.
      summary: Résumé des Publications
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Résumé des publications récupéré avec succès
        '401':
          description: Non authentifié
  /api/producers/publications/producer_stats/:
    get:
      operationId: producers_publications_producer_stats_retrieve
      description: |-
        Récupère les statistiques d'engagement du producteur authentifié (likes totaux et contacts uniques).
        Fournit une vue d'ensemble de l'activité et de la popularité du producteur sur la plateforme.
      summary: Statistiques Producteur
      tags:
      - Producer Pages
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Statistiques du producteur récupérées avec succès
        '401':
          description: Non authentifié
        '403':
          description: Permission refusée - Réservé aux producteurs
  /api/producers/publications/public_feed/:
    get:
      operationId: producers_publications_public_feed_retrieve
      description: |-
        Récupère toutes les publications validées de producteurs vérifiés dans l'ordre chronologique inverse.
        Constitue le flux principal visible par tous les consommateurs de la plateforme.
      summary: Flux Public
      tags:
      - Publications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Flux public des publications récupéré avec succès
        '401':
          description: Non authentifié
  /api/producers/publications/{id}/:
    get:
      operationId: producers_publications_retrieve
      description: Publication management for producers
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Publication.
        required: true
      tags:
      - Publications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
    patch:
      operationId: producers_publications_partial_update
      description: Publication management for producers
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Publication.
        required: true
      tags:
      - Publications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPublicationRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
    delete:
      operationId: producers_publications_destroy
      description: Publication management for producers
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Publication.
        required: true
      tags:
      - Publications
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
    put:
      operationId: producers_publications_update
      description: Publication management for producers
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Publication.
        required: true
      tags:
      - Publications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
          description: ''
  /api/producers/publications/{id}/interactions/:
    get:
      operationId: producers_publications_interactions_retrieve
      description: |-
        Récupère toutes les interactions (likes et conversations) pour une publication spécifique.
        Fournit une analyse détaillée de l'engagement généré par une publication particulière.
      summary: Interactions Publication
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Publication.
        required: true
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Interactions de la publication récupérées avec succès
        '401':
          description: Non authentifié
        '404':
          description: Publication non trouvée
  /api/producers/publications/{id}/toggle_like/:
    post:
      operationId: producers_publications_toggle_like_create
      description: |-
        Ajoute ou retire un like sur une publication selon l'état actuel de l'utilisateur.
        Retourne l'état final du like (ajouté ou retiré) pour mise à jour de l'interface.
      summary: Basculer Like
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Publication.
        required: true
      tags:
      - Publications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Like basculé avec succès
        '401':
          description: Non authentifié
        '404':
          description: Publication non trouvée
  /api/producers/publications/{id}/validate_publication/:
    post:
      operationId: producers_publications_validate_publication_create
      description: |-
        Valide officiellement une publication pour la rendre publique (réservé aux administrateurs).
        Une fois validée, la publication apparaîtra dans le flux public et pourra recevoir des interactions.
      summary: Valider Publication
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Publication.
        required: true
      tags:
      - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Publication validée avec succès
        '401':
          description: Non authentifié
        '403':
          description: Permission refusée - Réservé aux administrateurs
        '404':
          description: Publication non trouvée
  /api/chats/chats/:
    get:
      operationId: list_user_chats
      description: "\n        Retrieve all conversations for the authenticated user.\
        \ Users can only see chats where they are either producer or consumer.\n \
        \       \n        Admins can view all conversations across the platform. Results\
        \ include conversation metadata, participants, and associated product information.\n\
        \        "
      summary: List User Conversations
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
              examples:
                UserConversations:
                  value:
                  - - id: 1
                      producer:
                        id: 5
                        email: producer@example.com
                        first_name: Jean
                        last_name: Dupont
                      consumer:
                        id: 3
                        email: consumer@example.com
                        first_name: Marie
                        last_name: Martin
                      product:
                        id: 12
                        title: Tomates cerises bio
                        price: 4.5
                      created_at: '2024-01-20T10:30:00Z'
                      updated_at: '2024-01-25T15:45:00Z'
                      message_count: 8
                      last_message_at: '2024-01-25T15:45:00Z'
                    - id: 2
                      producer:
                        id: 7
                        email: farmer@example.com
                        first_name: Pierre
                        last_name: Bernard
                      consumer:
                        id: 3
                        email: consumer@example.com
                        first_name: Marie
                        last_name: Martin
                      product:
                        id: 23
                        title: Fromage de chèvre
                        price: 8.9
                      created_at: '2024-01-18T14:20:00Z'
                      updated_at: '2024-01-24T09:15:00Z'
                      message_count: 5
                      last_message_at: '2024-01-24T09:15:00Z'
                  summary: User Conversations
          description: List of user conversations with participants and product details
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
    post:
      operationId: create_chat
      description: "\n        Create a new conversation between a producer and consumer\
        \ about a specific product. Requires authentication and valid participant\
        \ roles.\n        \n        Conversations are automatically created when a\
        \ consumer contacts a producer about a product. Each product-consumer-producer\
        \ combination creates a unique chat.\n        "
      summary: Create New Conversation
      tags:
      - Conversations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
              examples:
                ChatCreated:
                  value:
                    id: 15
                    producer:
                      id: 5
                      email: producer@example.com
                      first_name: Jean
                      last_name: Dupont
                    consumer:
                      id: 3
                      email: consumer@example.com
                      first_name: Marie
                      last_name: Martin
                    product:
                      id: 12
                      title: Tomates cerises bio
                      price: 4.5
                    created_at: '2024-01-25T16:30:00Z'
                    updated_at: '2024-01-25T16:30:00Z'
                    message_count: 0
                    last_message_at: null
                  summary: Chat Created
          description: Conversation created successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    producer:
                    - This field is required.
                    product:
                    - Invalid product ID.
                  summary: Validation Errors
                ChatAlreadyExists:
                  value:
                    detail: Conversation already exists between these participants
                      for this product.
                  summary: Chat Already Exists
                InvalidParticipants:
                  value:
                    detail: Cannot create conversation between users of the same type.
                  summary: Invalid Participants
          description: Invalid chat creation data
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ProductNotFound:
                  value:
                    detail: Product not found or not available.
                  summary: Product Not Found
          description: Referenced product does not exist
  /api/chats/chats/latest_messages/:
    get:
      operationId: get_latest_messages
      description: "\n        Get the latest message from each conversation with unread\
        \ count and partner information. Perfect for chat list interfaces.\n     \
        \   \n        Returns conversation summaries with partner details, last message\
        \ preview, unread counts, and timestamps for building chat overview screens.\n\
        \        "
      summary: Latest Messages Summary
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                LatestMessages:
                  value:
                  - chat_id: 1
                    product:
                      id: 12
                      title: Tomates cerises bio
                    partner:
                      id: 5
                      email: producer@example.com
                      name: Jean Dupont
                      profile_picture: https://api.example.com/media/profiles/producer_5.jpg
                    latest_message:
                      id: 3
                      content: Parfait ! Quelle est la quantité minimum pour une commande
                        ?
                      is_read: false
                      created_at: '2024-01-25T15:45:00Z'
                      is_mine: true
                    unread_count: 2
                  - chat_id: 2
                    product:
                      id: 23
                      title: Fromage de chèvre
                    partner:
                      id: 7
                      email: farmer@example.com
                      name: Pierre Bernard
                      profile_picture: 'null'
                    latest_message:
                      id: 8
                      content: Je peux vous préparer 2kg pour demain matin.
                      is_read: true
                      created_at: '2024-01-24T09:15:00Z'
                      is_mine: false
                    unread_count: 0
                  summary: Latest Messages
          description: Latest messages summary with unread counts and partner info
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/chats/chats/my_chats/:
    get:
      operationId: get_my_chats
      description: "\n        Retrieve all conversations for the current authenticated\
        \ user. Shows conversations where user is either producer or consumer.\n \
        \       \n        Returns conversations sorted by last activity with summary\
        \ information including participant details and latest message timestamps.\n\
        \        "
      summary: Get My Conversations
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
              examples:
                MyConversations:
                  value:
                  - - id: 1
                      producer:
                        id: 5
                        email: producer@example.com
                        first_name: Jean
                        last_name: Dupont
                      consumer:
                        id: 3
                        email: consumer@example.com
                        first_name: Marie
                        last_name: Martin
                      product:
                        id: 12
                        title: Tomates cerises bio
                        price: 4.5
                      created_at: '2024-01-20T10:30:00Z'
                      updated_at: '2024-01-25T15:45:00Z'
                      message_count: 8
                      last_message_at: '2024-01-25T15:45:00Z'
                  summary: My Conversations
          description: User conversations sorted by activity
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/chats/chats/{id}/:
    get:
      operationId: get_chat_details
      description: "\n        Retrieve detailed information about a specific conversation.\
        \ Only participants (producer/consumer) can access conversation details.\n\
        \        \n        Includes participant information, product details, message\
        \ count, and last activity timestamp.\n        "
      summary: Get Conversation Details
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
              examples:
                ChatDetails:
                  value:
                    id: 1
                    producer:
                      id: 5
                      email: producer@example.com
                      first_name: Jean
                      last_name: Dupont
                      profile_picture: https://api.example.com/media/profiles/producer_5.jpg
                    consumer:
                      id: 3
                      email: consumer@example.com
                      first_name: Marie
                      last_name: Martin
                      profile_picture: https://api.example.com/media/profiles/consumer_3.jpg
                    product:
                      id: 12
                      title: Tomates cerises bio
                      price: 4.5
                      image: https://api.example.com/media/products/tomatoes_12.jpg
                    created_at: '2024-01-20T10:30:00Z'
                    updated_at: '2024-01-25T15:45:00Z'
                    message_count: 8
                    last_message_at: '2024-01-25T15:45:00Z'
                  summary: Chat Details
          description: Conversation details with participant and product information
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to access this conversation.
                  summary: Access Denied
          description: User is not a participant in this conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ChatNotFound:
                  value:
                    detail: Not found.
                  summary: Chat Not Found
          description: Conversation does not exist
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
    patch:
      operationId: partial_update_chat
      description: "\n        Partially update conversation settings. Only provided\
        \ fields will be updated, others remain unchanged.\n        \n        Commonly\
        \ used for updating notification settings, archiving conversations, or marking\
        \ as important.\n        "
      summary: Partial Update Conversation
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Conversations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: Conversation updated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    notifications_enabled:
                    - This field must be a boolean.
                  summary: Validation Errors
          description: Invalid update data
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to modify this conversation.
                  summary: Access Denied
          description: User cannot modify this conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ChatNotFound:
                  value:
                    detail: Not found.
                  summary: Chat Not Found
          description: Conversation does not exist
    delete:
      operationId: delete_chat
      description: "\n        Delete a conversation and all associated messages. This\
        \ action is irreversible and removes all chat history.\n        \n       \
        \ Only conversation participants can delete chats. Admins may delete any conversation\
        \ for moderation purposes.\n        "
      summary: Delete Conversation
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Conversation deleted successfully
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to delete this conversation.
                  summary: Access Denied
          description: User cannot delete this conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ChatNotFound:
                  value:
                    detail: Not found.
                  summary: Chat Not Found
          description: Conversation does not exist
    put:
      operationId: update_chat
      description: "\n        Update conversation settings or metadata. Limited updates\
        \ available based on user permissions and conversation status.\n        \n\
        \        Typical updates include marking conversations as archived, updating\
        \ notification preferences, or modifying conversation settings.\n        "
      summary: Update Conversation
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Conversations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: Conversation updated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    archived:
                    - Invalid value for archived status.
                  summary: Validation Errors
          description: Invalid update data
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to modify this conversation.
                  summary: Access Denied
          description: User cannot modify this conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ChatNotFound:
                  value:
                    detail: Not found.
                  summary: Chat Not Found
          description: Conversation does not exist
  /api/chats/chats/{id}/latest/:
    get:
      operationId: get_latest_message
      description: "\n        Retrieve the most recent message from a specific conversation.\
        \ Useful for checking conversation activity and displaying message previews.\n\
        \        \n        Returns the latest message with sender information and\
        \ timestamps, or 404 if no messages exist in the conversation.\n        "
      summary: Get Latest Message
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                LatestMessage:
                  value:
                    id: 3
                    chat: 1
                    sender:
                      id: 3
                      email: consumer@example.com
                      first_name: Marie
                      last_name: Martin
                    content: Parfait ! Quelle est la quantité minimum pour une commande
                      ?
                    is_read: false
                    created_at: '2024-01-25T15:45:00Z'
                    updated_at: '2024-01-25T15:45:00Z'
                  summary: Latest Message
          description: Most recent message from the conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NoMessages:
                  value:
                    detail: Aucun message trouvé.
                  summary: No Messages
                ChatNotFound:
                  value:
                    detail: Not found.
                  summary: Chat Not Found
          description: No messages found or conversation does not exist
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to access this conversation.
                  summary: Access Denied
          description: User is not a participant in this conversation
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/chats/chats/{id}/messages/:
    get:
      operationId: get_chat_messages
      description: "\n        Retrieve all messages from a specific conversation.\
        \ Automatically marks unread messages as read for the requesting user.\n \
        \       \n        Messages are returned in chronological order with sender\
        \ information, read status, and timestamps. Only conversation participants\
        \ can access messages.\n        "
      summary: Get Conversation Messages
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              examples:
                ChatMessages:
                  value:
                  - - id: 1
                      chat: 1
                      sender:
                        id: 3
                        email: consumer@example.com
                        first_name: Marie
                        last_name: Martin
                      content: Bonjour, je suis intéressée par vos tomates cerises.
                        Sont-elles disponibles cette semaine ?
                      is_read: true
                      created_at: '2024-01-20T10:30:00Z'
                      updated_at: '2024-01-20T10:30:00Z'
                    - id: 2
                      chat: 1
                      sender:
                        id: 5
                        email: producer@example.com
                        first_name: Jean
                        last_name: Dupont
                      content: Bonjour Marie ! Oui, j'ai une belle récolte cette semaine.
                        Elles sont parfaitement mûres.
                      is_read: true
                      created_at: '2024-01-20T11:15:00Z'
                      updated_at: '2024-01-20T11:15:00Z'
                    - id: 3
                      chat: 1
                      sender:
                        id: 3
                        email: consumer@example.com
                        first_name: Marie
                        last_name: Martin
                      content: Parfait ! Quelle est la quantité minimum pour une commande
                        ?
                      is_read: false
                      created_at: '2024-01-25T15:45:00Z'
                      updated_at: '2024-01-25T15:45:00Z'
                  summary: Chat Messages
          description: List of conversation messages in chronological order
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to access this conversation.
                  summary: Access Denied
          description: User is not a participant in this conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ChatNotFound:
                  value:
                    detail: Not found.
                  summary: Chat Not Found
          description: Conversation does not exist
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/chats/messages/:
    post:
      operationId: send_message
      description: "\n        Send a new message in a conversation. User must be a\
        \ participant (producer or consumer) in the target conversation.\n       \
        \ \n        Messages are delivered in real-time and automatically update conversation\
        \ timestamps. Supports text content with emoji and basic formatting.\n   \
        \     "
      summary: Send Message
      tags:
      - Conversations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                MessageSent:
                  value:
                    id: 4
                    chat: 1
                    sender:
                      id: 5
                      email: producer@example.com
                      first_name: Jean
                      last_name: Dupont
                    content: La quantité minimum est de 500g, mais je peux vous faire
                      un panier de 1kg pour 8€.
                    is_read: false
                    created_at: '2024-01-25T16:30:00Z'
                    updated_at: '2024-01-25T16:30:00Z'
                  summary: Message Sent
          description: Message sent successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationErrors:
                  value:
                    content:
                    - This field is required.
                    chat:
                    - Invalid chat ID.
                  summary: Validation Errors
                EmptyMessage:
                  value:
                    content:
                    - Message content cannot be empty.
                  summary: Empty Message
                MessageTooLong:
                  value:
                    content:
                    - Message content is too long. Maximum 1000 characters.
                  summary: Message Too Long
          description: Invalid message data
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to send messages in this conversation.
                  summary: Access Denied
                ChatArchived:
                  value:
                    detail: Cannot send messages to archived conversations.
                  summary: Chat Archived
          description: User cannot send messages in this conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ChatNotFound:
                  value:
                    detail: Conversation not found.
                  summary: Chat Not Found
          description: Target conversation does not exist
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/chats/messages/{id}/:
    get:
      operationId: get_message_details
      description: "\n        Retrieve detailed information about a specific message.\
        \ Only participants of the conversation can access message details.\n    \
        \    \n        Includes sender information, content, read status, and timestamps.\
        \ Useful for message threading and detailed view interfaces.\n        "
      summary: Get Message Details
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Conversations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                MessageDetails:
                  value:
                    id: 2
                    chat: 1
                    sender:
                      id: 5
                      email: producer@example.com
                      first_name: Jean
                      last_name: Dupont
                      profile_picture: https://api.example.com/media/profiles/producer_5.jpg
                    content: Bonjour Marie ! Oui, j'ai une belle récolte cette semaine.
                      Elles sont parfaitement mûres.
                    is_read: true
                    created_at: '2024-01-20T11:15:00Z'
                    updated_at: '2024-01-20T11:15:00Z'
                  summary: Message Details
          description: Detailed message information
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to access this message.
                  summary: Access Denied
          description: User is not a participant in the conversation
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MessageNotFound:
                  value:
                    detail: Not found.
                  summary: Message Not Found
          description: Message does not exist
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/admin_apidashboard/stats/:
    get:
      operationId: get_dashboard_statistics
      description: "\n    Retrieve comprehensive dashboard statistics for administrative\
        \ overview. Includes user metrics, growth indicators, platform activity, and\
        \ top performers.\n    \n    Provides real-time analytics for user registrations,\
        \ producer pages, products, orders, conversations, and revenue tracking with\
        \ growth percentages.\n    "
      summary: Admin Dashboard Statistics
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                DashboardStatistics:
                  value:
                    utilisateurs:
                      total: 1250
                      actifs: 1180
                      producteurs: 245
                      consommateurs: 935
                      administrateurs: 8
                      croissance:
                        mois: +12.5%
                        semaine: +3.2%
                        aujourd_hui: 15
                    pages_producteur:
                      total: 198
                      validees: 156
                      en_attente: 42
                    produits:
                      total: 1456
                      valides: 1289
                      en_attente: 167
                      aujourd_hui: 23
                    conversations:
                      total: 3421
                      messages_aujourd_hui: 89
                    evaluations:
                      total: 892
                      moyenne: 4.3
                    commandes:
                      total: 567
                      en_attente: 23
                      completees: 489
                      revenues:
                        total: 45678.5
                        aujourd_hui: 1234.75
                    meilleurs_producteurs:
                    - id: 1
                      nom: Ferme Bio Martin
                      evaluation_moyenne: 4.9
                      nombre_evaluations: 45
                      ville: Lyon
                    - id: 2
                      nom: Élevage des Monts
                      evaluation_moyenne: 4.8
                      nombre_evaluations: 32
                      ville: Grenoble
                    activite_recente:
                      nouveaux_utilisateurs:
                      - id: 150
                        email: nouveau@example.com
                        first_name: Jean
                        last_name: Dupont
                        date_joined: '2024-01-25T10:30:00Z'
                      nouveaux_produits:
                      - id: 89
                        title: Tomates Bio
                        published_at: '2024-01-25T09:45:00Z'
                        producer_page__name: Ferme Bio Martin
                      nouvelles_commandes:
                      - id: 234
                        status: pending
                        total_amount: 67.5
                        created_at: '2024-01-25T11:15:00Z'
                        user__email: client@example.com
                  summary: Dashboard Statistics
          description: Comprehensive dashboard statistics with growth metrics
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Access Denied
          description: Admin privileges required
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/admin_apidashboard/activity-trends/:
    get:
      operationId: get_activity_trends
      description: "\n    Retrieve platform activity trends for specified time periods.\
        \ Provides time-series data for registrations, products, orders, and messages.\n\
        \    \n    Supports weekly (7 days), monthly (30 days), and yearly (12 months)\
        \ trend analysis with formatted labels for chart visualization.\n    "
      summary: Platform Activity Trends
      parameters:
      - in: query
        name: period
        schema:
          type: string
          enum:
          - annee
          - mois
          - semaine
          default: semaine
        description: Time period for trends analysis
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                WeeklyTrends:
                  value:
                    labels:
                    - 19/01
                    - 20/01
                    - 21/01
                    - 22/01
                    - 23/01
                    - 24/01
                    - 25/01
                    inscriptions:
                    - 5
                    - 8
                    - 12
                    - 6
                    - 9
                    - 15
                    - 11
                    produits:
                    - 2
                    - 4
                    - 1
                    - 6
                    - 3
                    - 8
                    - 5
                    commandes:
                    - 12
                    - 18
                    - 23
                    - 15
                    - 21
                    - 28
                    - 19
                    messages:
                    - 45
                    - 67
                    - 52
                    - 89
                    - 76
                    - 95
                    - 78
                  summary: Weekly Trends
                MonthlyTrends:
                  value:
                    labels:
                    - 26/12
                    - 27/12
                    - 28/12
                    - 29/12
                    - 30/12
                    - 31/12
                    - 01/01
                    inscriptions:
                    - 8
                    - 12
                    - 15
                    - 9
                    - 11
                    - 7
                    - 13
                    produits:
                    - 3
                    - 7
                    - 2
                    - 9
                    - 4
                    - 6
                    - 8
                    commandes:
                    - 23
                    - 31
                    - 28
                    - 35
                    - 29
                    - 33
                    - 27
                    messages:
                    - 89
                    - 102
                    - 95
                    - 118
                    - 87
                    - 94
                    - 108
                  summary: Monthly Trends
                YearlyTrends:
                  value:
                    labels:
                    - Feb 2024
                    - Mar 2024
                    - Apr 2024
                    - May 2024
                    - Jun 2024
                    - Jul 2024
                    inscriptions:
                    - 125
                    - 167
                    - 189
                    - 143
                    - 156
                    - 178
                    produits:
                    - 45
                    - 67
                    - 52
                    - 78
                    - 61
                    - 84
                    commandes:
                    - 234
                    - 289
                    - 312
                    - 276
                    - 298
                    - 325
                    messages:
                    - 1245
                    - 1567
                    - 1389
                    - 1678
                    - 1456
                    - 1723
                  summary: Yearly Trends
          description: Time-series activity trends data
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InvalidPeriod:
                  value:
                    detail: Période invalide. Utilisez 'semaine', 'mois' ou 'annee'.
                  summary: Invalid Period
          description: Invalid period parameter
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Access Denied
          description: Admin privileges required
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/admin_apidashboard/recent-users/:
    get:
      operationId: get_recent_users
      description: "\n    Retrieve list of recently registered users for administrative\
        \ monitoring. Supports flexible time periods for registration tracking.\n\
        \    \n    Helps admins monitor new user activity, account verification status,\
        \ and registration patterns with configurable date ranges.\n    "
      summary: Recent User Registrations
      parameters:
      - in: query
        name: days
        schema:
          type: integer
          enum:
          - 30
          - 7
          - 90
          default: 7
        description: Number of days to look back for recent registrations
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                RecentUsers(7Days):
                  value:
                    nombre_utilisateurs: 23
                    periode: Derniers 7 jours
                    utilisateurs:
                    - id: 150
                      email: nouveau@example.com
                      nom: Jean Dupont
                      date_inscription: '2024-01-25T10:30:00Z'
                      type: Consommateur
                      actif: true
                      email_verifie: true
                    - id: 149
                      email: producteur@example.com
                      nom: Marie Martin
                      date_inscription: '2024-01-24T16:45:00Z'
                      type: Producteur
                      actif: false
                      email_verifie: false
                    - id: 148
                      email: client@example.com
                      nom: Pierre Bernard
                      date_inscription: '2024-01-23T14:20:00Z'
                      type: Consommateur
                      actif: true
                      email_verifie: true
                  summary: Recent Users (7 days)
                RecentUsers(30Days):
                  value:
                    nombre_utilisateurs: 89
                    periode: Derniers 30 jours
                    utilisateurs:
                    - id: 150
                      email: recent@example.com
                      nom: Sophie Durand
                      date_inscription: '2024-01-20T09:15:00Z'
                      type: Producteur
                      actif: true
                      email_verifie: true
                  summary: Recent Users (30 days)
          description: List of recent user registrations with summary statistics
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InvalidDaysParameter:
                  value:
                    detail: Invalid days parameter. Must be 7, 30, or 90.
                  summary: Invalid Days Parameter
          description: Invalid days parameter provided
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Access Denied
          description: Admin privileges required
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/admin_apiproducers/{producer_id}/:
    get:
      operationId: get_producer_details
      description: "\n    Retrieve comprehensive producer profile analysis for administrative\
        \ review. Includes business metrics, customer interactions, and performance\
        \ data.\n    \n    Provides detailed statistics on products, evaluations,\
        \ conversations, orders, revenue, and recent client interactions with conversion\
        \ tracking.\n    "
      summary: 'Admin: Producer Detailed Analysis'
      parameters:
      - in: path
        name: producer_id
        schema:
          type: integer
        description: Unique identifier of the producer to analyze
        required: true
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ProducerAnalysis:
                  value:
                    producteur:
                      id: 1
                      email: producer@example.com
                      first_name: Jean
                      last_name: Dupont
                      user_type: producer
                      is_verified: true
                      email_verified: true
                      date_joined: '2024-01-15T10:30:00Z'
                    page_producteur:
                      id: 1
                      name: Ferme Bio Martin
                      city: Lyon
                      is_validated: true
                      description: Ferme biologique spécialisée dans les légumes de
                        saison
                      created_at: '2024-01-16T09:00:00Z'
                    statistiques:
                      produits:
                        total: 25
                        valides: 23
                      evaluations:
                        moyenne: 4.7
                        nombre: 34
                      conversations:
                        nombre: 89
                        messages: 456
                      commandes:
                        nombre: 67
                        completees: 62
                        revenu_total: 15678.9
                    interactions_clients:
                    - client:
                        id: 45
                        email: client@example.com
                        nom: Marie Martin
                      produit:
                        id: 12
                        titre: Tomates cerises bio
                      nombre_messages: 8
                      derniere_activite: '2024-01-24T15:30:00Z'
                      a_abouti_commande: true
                    produits_recents:
                    - id: 89
                      title: Courgettes bio
                      price: 3.5
                      is_valid: true
                      published_at: '2024-01-23T14:20:00Z'
                  summary: Producer Analysis
                ProducerWithoutPage:
                  value:
                    producteur:
                      id: 2
                      email: newproducer@example.com
                      first_name: Pierre
                      last_name: Bernard
                      user_type: producer
                      is_verified: false
                    page_producteur: null
                    message: Ce producteur n'a pas encore créé de page ou une erreur
                      s'est produite.
                  summary: Producer Without Page
          description: Detailed producer analysis with comprehensive metrics
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ProducerNotFound:
                  value:
                    detail: Producteur non trouvé
                  summary: Producer Not Found
          description: Producer does not exist or is not a producer account
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Access Denied
          description: Admin privileges required
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/admin_apiclients/{client_id}/:
    get:
      operationId: get_client_details
      description: "\n    Retrieve comprehensive client profile analysis for administrative\
        \ review. Includes activity metrics, order history, and producer interactions.\n\
        \    \n    Provides detailed statistics on conversations, orders, spending,\
        \ evaluations, and interaction patterns with conversion tracking.\n    "
      summary: 'Admin: Client Detailed Analysis'
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        description: Unique identifier of the client to analyze
        required: true
      tags:
      - Admin Dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ClientAnalysis:
                  value:
                    client:
                      id: 2
                      email: client@example.com
                      first_name: Marie
                      last_name: Martin
                      user_type: consumer
                      is_active: true
                      date_joined: '2024-01-10T14:30:00Z'
                    statistiques:
                      conversations:
                        nombre: 12
                        messages: 89
                      commandes:
                        nombre: 8
                        completees: 7
                        montant_total: 245.5
                      evaluations:
                        nombre: 5
                    interactions_producteurs:
                    - producteur:
                        id: 1
                        email: producer@example.com
                        nom: Jean Dupont
                      page_producteur:
                        id: 1
                        nom: Ferme Bio Martin
                      produit:
                        id: 12
                        titre: Tomates cerises bio
                      nombre_messages: 15
                      derniere_activite: '2024-01-24T16:45:00Z'
                      a_abouti_commande: true
                    commandes_recentes:
                    - id: 45
                      status: completed
                      total_amount: 67.5
                      created_at: '2024-01-23T10:30:00Z'
                    evaluations_recentes:
                    - id: 23
                      producer_page__name: Ferme Bio Martin
                      stars: 5
                      comment: Excellent produits, très frais
                      created_at: '2024-01-22T14:20:00Z'
                  summary: Client Analysis
          description: Detailed client analysis with comprehensive activity metrics
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ClientNotFound:
                  value:
                    detail: Client non trouvé
                  summary: Client Not Found
          description: Client does not exist or is not a consumer account
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Access Denied
          description: Admin privileges required
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
  /api/admin_apivalidation/producer-pages/:
    get:
      operationId: get_pending_producer_pages
      description: "\n    Retrieve list of producer pages awaiting validation. Allows\
        \ admins to review and approve pending producer page submissions.\n    \n\
        \    Includes producer information, page details, creation date, and truncated\
        \ descriptions for administrative review.\n    "
      summary: Pending Producer Pages
      tags:
      - Admin Operations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                PendingPagesList:
                  value:
                  - id: 15
                    nom: Ferme des Oliviers
                    producteur:
                      id: 23
                      email: olivier@example.com
                      nom: Pierre Olivier
                    ville: Marseille
                    date_creation: '2024-01-24T16:30:00Z'
                    description: Producteur d'huile d'olive artisanale depuis 3 générations.
                      Nos oliviers sont cultivés sans pesticides...
                  - id: 16
                    nom: Élevage des Monts
                    producteur:
                      id: 24
                      email: eleveur@example.com
                      nom: Michel Durand
                    ville: Grenoble
                    date_creation: '2024-01-23T14:15:00Z'
                    description: Élevage de chèvres en montagne, production de fromages
                      fermiers traditionnels. Agriculture biologique...
                  summary: Pending Pages List
          description: List of pending producer pages awaiting validation
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Access Denied
          description: Admin privileges required
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                NotAuthenticated:
                  value:
                    detail: Authentication credentials were not provided.
                  summary: Not Authenticated
          description: Authentication required
    post:
      operationId: validate_producer_page
      description: "\n        Validate a pending producer page and activate it for\
        \ public visibility. Approved pages become searchable and accessible to consumers.\n\
        \        \n        Requires admin privileges and valid page ID. Sets page\
        \ validation status to true permanently.\n        "
      summary: Validate Producer Page
      tags:
      - Admin Operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              ValidationRequest:
                value:
                  page_id: 15
                summary: Validation Request
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ValidationRequest:
                  value:
                    page_id: 15
                  summary: Validation Request
                ValidationSuccess:
                  value:
                    message: La page 'Ferme des Oliviers' a été validée avec succès
                    page_id: 15
                  summary: Validation Success
          description: Producer page validated successfully
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                MissingPageID:
                  value:
                    detail: ID de page requis
                  summary: Missing Page ID
                AlreadyValidated:
                  value:
                    detail: Cette page est déjà validée
                  summary: Already Validated
          description: Validation failed due to missing or invalid data
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                PageNotFound:
                  value:
                    detail: Page producteur non trouvée
                  summary: Page Not Found
          description: Producer page does not exist
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                AccessDenied:
                  value:
                    detail: You do not have permission to perform this action.
                  summary: Access Denied
          description: Admin privileges required
  /api/notificationsnotifications/:
    get:
      operationId: notificationsnotifications_list
      description: |-
        Récupère toutes les notifications de l'utilisateur avec support de filtrage par type et statut.
        Les notifications sont ordonnées par date de création décroissante (plus récentes en premier).
      summary: Lister les Notifications
      parameters:
      - in: query
        name: is_read
        schema:
          type: boolean
        description: Filtrer par statut de lecture (true pour lues, false pour non
          lues)
        examples:
          NonLues:
            value: false
            summary: Non lues
          Lues:
            value: true
      - in: query
        name: type
        schema:
          type: string
        description: 'Filtrer par type de notification (ex: order, message, favorite)'
        examples:
          Commandes:
            value: order
          Messages:
            value: message
          Favoris:
            value: favorite
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Liste des notifications récupérée avec succès
        '401':
          description: Non authentifié
  /api/notificationsnotifications/marquer_tout_lu/:
    post:
      operationId: notificationsnotifications_marquer_tout_lu_create
      description: |-
        Marque toutes les notifications de l'utilisateur comme lues en une seule opération.
        Opération en masse qui affecte uniquement les notifications non lues de l'utilisateur actuel.
      summary: Marquer Tout comme Lu
      tags:
      - Notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Toutes les notifications marquées comme lues avec succès
        '401':
          description: Non authentifié
  /api/notificationsnotifications/mes_notifications/:
    get:
      operationId: notificationsnotifications_mes_notifications_retrieve
      description: |-
        Récupère toutes les notifications de l'utilisateur avec filtrage avancé par type et statut.
        Alternative à l'endpoint de liste standard avec plus d'options de filtrage personnalisées.
      summary: Mes Notifications
      parameters:
      - in: query
        name: is_read
        schema:
          type: boolean
        description: Filtrer par statut de lecture
        examples:
          NonLuesUniquement:
            value: false
            summary: Non lues uniquement
          LuesUniquement:
            value: true
            summary: Lues uniquement
      - in: query
        name: type
        schema:
          type: string
        description: Filtrer par type de notification spécifique
        examples:
          Commandes:
            value: order
          Messages:
            value: message
          Favoris:
            value: favorite
          Système:
            value: system
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Notifications filtrées récupérées avec succès
        '401':
          description: Non authentifié
  /api/notificationsnotifications/nombre_non_lues/:
    get:
      operationId: notificationsnotifications_nombre_non_lues_retrieve
      description: |-
        Retourne le nombre total de notifications non lues pour l'utilisateur authentifié.
        Utile pour afficher un badge ou compteur dans l'interface utilisateur.
      summary: Nombre de Non Lues
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Nombre de notifications non lues récupéré avec succès
        '401':
          description: Non authentifié
  /api/notificationsnotifications/supprimer_lues/:
    delete:
      operationId: notificationsnotifications_supprimer_lues_destroy
      description: |-
        Supprime en masse toutes les notifications déjà lues de l'utilisateur authentifié.
        Retourne le nombre de notifications supprimées pour confirmation de l'opération.
      summary: Supprimer Toutes les Lues
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Notifications lues supprimées avec succès
        '401':
          description: Non authentifié
  /api/notificationsnotifications/{id}/:
    get:
      operationId: notificationsnotifications_retrieve
      description: |-
        Récupère les détails complets d'une notification spécifique appartenant à l'utilisateur.
        Retourne toutes les informations incluant les données associées et métadonnées.
      summary: Détail d'une Notification
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Détails de la notification récupérés avec succès
        '401':
          description: Non authentifié
        '404':
          description: Notification non trouvée ou n'appartient pas à l'utilisateur
  /api/notificationsnotifications/{id}/marquer_lu/:
    post:
      operationId: notificationsnotifications_marquer_lu_create
      description: |-
        Marque une notification spécifique comme lue et enregistre l'horodatage de lecture.
        La notification doit appartenir à l'utilisateur authentifié pour être modifiée.
      summary: Marquer comme Lu
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Notification marquée comme lue avec succès
        '401':
          description: Non authentifié
        '404':
          description: Notification non trouvée ou n'appartient pas à l'utilisateur
  /api/notificationsnotifications/{id}/supprimer/:
    delete:
      operationId: notificationsnotifications_supprimer_destroy
      description: |-
        Supprime définitivement une notification spécifique appartenant à l'utilisateur.
        L'opération est irréversible et la notification sera définitivement supprimée de la base de données.
      summary: Supprimer Notification
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Notification supprimée avec succès
        '401':
          description: Non authentifié
        '404':
          description: Notification non trouvée ou n'appartient pas à l'utilisateur
  /api/search:
    get:
      operationId: search_retrieve
      description: |-
        Effectue une recherche unifiée à travers produits, producteurs et catégories avec filtres avancés.
        Supporte la pagination, le tri multi-critères et des filtres flexibles pour une expérience de recherche complète.
      summary: Recherche Globale
      parameters:
      - in: query
        name: categorie
        schema:
          type: string
        description: Filtrer par slug de catégorie
        examples:
          FruitsEtLégumes:
            value: fruits-legumes
            summary: Fruits et légumes
          ProduitsLaitiers:
            value: produits-laitiers
            summary: Produits laitiers
          Viandes:
            value: viandes
      - in: query
        name: evaluation
        schema:
          type: integer
        description: Évaluation minimum sur 5 (producteurs uniquement)
        examples:
          4ÉtoilesMinimum:
            value: 4
            summary: 4 étoiles minimum
          5ÉtoilesUniquement:
            value: 5
            summary: 5 étoiles uniquement
          3ÉtoilesMinimum:
            value: 3
            summary: 3 étoiles minimum
      - in: query
        name: page
        schema:
          type: integer
        description: Numéro de page pour la pagination (commence à 1)
        examples:
          PremièrePage:
            value: 1
            summary: Première page
          DeuxièmePage:
            value: 2
            summary: Deuxième page
          DixièmePage:
            value: 10
            summary: Dixième page
      - in: query
        name: prix_max
        schema:
          type: number
          format: double
        description: Prix maximum en euros (produits uniquement)
        examples:
          15EurosMaximum:
            value: 15.0
            summary: 15 euros maximum
          50EurosMaximum:
            value: 50.0
            summary: 50 euros maximum
          100EurosMaximum:
            value: 100.0
            summary: 100 euros maximum
      - in: query
        name: prix_min
        schema:
          type: number
          format: double
        description: Prix minimum en euros (produits uniquement)
        examples:
          5EurosMinimum:
            value: 5.0
            summary: 5 euros minimum
          10EurosMinimum:
            value: 10.0
            summary: 10 euros minimum
          20EurosMinimum:
            value: 20.0
            summary: 20 euros minimum
      - in: query
        name: q
        schema:
          type: string
        description: Terme de recherche (nom, description, localisation)
        examples:
          RechercheTomates:
            value: tomates bio
            summary: Recherche tomates
          RechercheProducteur:
            value: ferme soleil
            summary: Recherche producteur
          RechercheLocalisation:
            value: Lyon
            summary: Recherche localisation
      - in: query
        name: taille_page
        schema:
          type: integer
        description: Nombre d'éléments par page (maximum 50)
        examples:
          10ParPage:
            value: 10
            summary: 10 par page
          20ParPage:
            value: 20
            summary: 20 par page
          50ParPage:
            value: 50
            summary: 50 par page
      - in: query
        name: tri
        schema:
          type: string
          enum:
          - date
          - evaluation
          - nom
          - prix_asc
          - prix_desc
        description: Critère de tri des résultats
        examples:
          ParNomAlphabétique:
            value: nom
            summary: Par nom alphabétique
          PrixCroissant:
            value: prix_asc
            summary: Prix croissant
          PrixDécroissant:
            value: prix_desc
            summary: Prix décroissant
          PlusRécents:
            value: date
            summary: Plus récents
          MieuxNotés:
            value: evaluation
            summary: Mieux notés
      - in: query
        name: type
        schema:
          type: string
          enum:
          - producteurs
          - produits
          - tout
        description: Type de résultats à retourner
        examples:
          TousLesRésultats:
            value: tout
            summary: Tous les résultats
          ProduitsUniquement:
            value: produits
            summary: Produits uniquement
          ProducteursUniquement:
            value: producteurs
            summary: Producteurs uniquement
      - in: query
        name: ville
        schema:
          type: string
        description: Filtrer par ville (recherche partielle)
        examples:
          Paris:
            value: Paris
          Lyon:
            value: Lyon
          RégionParisienne:
            value: paris
            summary: Région parisienne
      tags:
      - Recherche
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Résultats de recherche récupérés avec succès
        '400':
          description: Paramètres de recherche invalides
        '401':
          description: Non authentifié
  /api/searchsuggestions/:
    get:
      operationId: searchsuggestions_retrieve
      description: |-
        Fournit des suggestions automatiques pour l'autocomplétion lors de la saisie dans la barre de recherche.
        Recherche en temps réel dans les produits, producteurs et catégories avec limite de résultats optimisée.
      summary: Suggestions de Recherche
      parameters:
      - in: query
        name: q
        schema:
          type: string
        description: Terme de recherche partiel (minimum 2 caractères)
        required: true
        examples:
          DébutDuMot:
            value: tom
            summary: Début du mot
          RechercheProducteur:
            value: ferme
            summary: Recherche producteur
          Catégorie:
            value: leg
          Ville:
            value: par
      - in: query
        name: type
        schema:
          type: string
          enum:
          - categories
          - producteurs
          - produits
          - tout
        description: Type de suggestions à retourner
        examples:
          ToutesLesSuggestions:
            value: tout
            summary: Toutes les suggestions
          ProduitsUniquement:
            value: produits
            summary: Produits uniquement
          ProducteursUniquement:
            value: producteurs
            summary: Producteurs uniquement
          CatégoriesUniquement:
            value: categories
            summary: Catégories uniquement
      tags:
      - Recherche
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Suggestions d'autocomplétion récupérées avec succès
        '400':
          description: Paramètres de recherche invalides
        '401':
          description: Non authentifié
  /api/searchvilles/:
    get:
      operationId: searchvilles_retrieve
      description: |-
        Récupère la liste complète des villes où sont implantés les producteurs validés de la plateforme.
        Utile pour construire des filtres de recherche géographiques avec options prédéfinies triées alphabétiquement.
      summary: Villes Disponibles
      tags:
      - Recherche
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Liste des villes disponibles récupérée avec succès
        '401':
          description: Non authentifié
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    Category:
      type: object
      description: Category serializer for producer page categories
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 100
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
      required:
      - id
      - name
      - slug
    CategoryRequest:
      type: object
      description: Category serializer for producer page categories
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 100
        description:
          type: string
      required:
      - name
    Chat:
      type: object
      description: |-
        Sérialiseur pour les conversations.

        Inclut des détails sur le producteur, le consommateur et le produit.
        Fournit également le dernier message et le nombre de messages non lus.
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
          title: Produit
        product_details:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        producer:
          type: integer
          readOnly: true
          title: Producteur
        producer_details:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        consumer:
          type: integer
          title: Consommateur
        consumer_details:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          title: Date de création
        updated_at:
          type: string
          format: date-time
          readOnly: true
          title: Date de mise à jour
        last_message:
          type: string
          readOnly: true
        unread_count:
          type: string
          readOnly: true
      required:
      - consumer
      - consumer_details
      - created_at
      - id
      - last_message
      - producer
      - producer_details
      - product
      - product_details
      - unread_count
      - updated_at
    ChatRequest:
      type: object
      description: |-
        Sérialiseur pour les conversations.

        Inclut des détails sur le producteur, le consommateur et le produit.
        Fournit également le dernier message et le nombre de messages non lus.
      properties:
        product:
          type: integer
          title: Produit
        consumer:
          type: integer
          title: Consommateur
      required:
      - consumer
      - product
    CustomTokenObtainPairRequest:
      type: object
      description: Custom token serializer that uses email and returns user data
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    Message:
      type: object
      description: |-
        Sérialiseur pour les messages individuels.

        Inclut des informations sur l'expéditeur et indique si le message
        a été envoyé par le producteur ou le consommateur.
      properties:
        id:
          type: integer
          readOnly: true
        chat:
          type: integer
          title: Conversation
        sender:
          type: integer
          readOnly: true
          title: Expéditeur
        sender_email:
          type: string
          format: email
          title: Email address
          readOnly: true
        is_producer:
          type: string
          readOnly: true
        content:
          type: string
          title: Contenu
        is_read:
          type: boolean
          readOnly: true
          title: Lu
        created_at:
          type: string
          format: date-time
          readOnly: true
          title: Date d'envoi
      required:
      - chat
      - content
      - created_at
      - id
      - is_producer
      - is_read
      - sender
      - sender_email
    MessageRequest:
      type: object
      description: |-
        Sérialiseur pour les messages individuels.

        Inclut des informations sur l'expéditeur et indique si le message
        a été envoyé par le producteur ou le consommateur.
      properties:
        chat:
          type: integer
          title: Conversation
        content:
          type: string
          minLength: 1
          title: Contenu
      required:
      - chat
      - content
    NotificationRequest:
      type: object
      description: |-
        Sérialiseur pour les notifications utilisateur.

        Expose toutes les informations sur les notifications, y compris
        le type, le titre, le message et les références aux objets associés.
      properties:
        notification_type:
          allOf:
          - $ref: '#/components/schemas/NotificationTypeEnum'
          title: Type de notification
        title:
          type: string
          minLength: 1
          title: Titre
          maxLength: 100
        message:
          type: string
          minLength: 1
        related_object_id:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          title: ID de l'objet associé
        related_object_type:
          type: string
          title: Type de l'objet associé
          maxLength: 50
        is_read:
          type: boolean
          title: Lu
      required:
      - message
      - notification_type
      - title
    NotificationTypeEnum:
      enum:
      - message
      - order
      - rating
      - producer
      - product
      - favorite
      - system
      - admin
      type: string
      description: |-
        * `message` - Nouveau Message
        * `order` - Mise à jour de Commande
        * `rating` - Nouvelle Évaluation
        * `producer` - Mise à jour de Page Producteur
        * `product` - Mise à jour de Produit
        * `favorite` - Nouveau Favori
        * `system` - Notification Système
        * `admin` - Notification Admin
    PasswordChangeRequest:
      type: object
      description: Password change serializer
      properties:
        current_password:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 1
        confirm_password:
          type: string
          minLength: 1
      required:
      - confirm_password
      - current_password
      - new_password
    PatchedCategoryRequest:
      type: object
      description: Category serializer for producer page categories
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 100
        description:
          type: string
    PatchedChatRequest:
      type: object
      description: |-
        Sérialiseur pour les conversations.

        Inclut des détails sur le producteur, le consommateur et le produit.
        Fournit également le dernier message et le nombre de messages non lus.
      properties:
        product:
          type: integer
          title: Produit
        consumer:
          type: integer
          title: Consommateur
    PatchedProducerPageRequest:
      type: object
      description: Producer page serializer with category management
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 255
        logo:
          type: string
          format: binary
        background_image:
          type: string
          format: binary
          title: Image de fond
        category_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          maxItems: 2
        country:
          type: string
          minLength: 1
          title: Pays
          maxLength: 100
        address:
          type: string
          minLength: 1
          title: Adresse
        telephone:
          type: string
          minLength: 1
          title: Téléphone
          maxLength: 20
        city:
          type: string
          title: Ville
          maxLength: 100
        description:
          type: string
    PatchedPublicationRequest:
      type: object
      description: Publication serializer with like functionality
      properties:
        page:
          type: integer
          title: Page producteur
        title:
          type: string
          title: Titre
          maxLength: 255
        description:
          type: string
          minLength: 1
        location:
          type: string
          minLength: 1
          title: Emplacement
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Prix
        category:
          type: integer
          title: Catégorie
        picture:
          type: string
          format: binary
          title: Photo
        discussion_link:
          type: string
          title: Lien de discussion
          maxLength: 255
    PatchedUserRequest:
      type: object
      description: Complete user serializer with all fields visible
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone:
          type: string
          maxLength: 15
        city:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        address:
          type: string
        description:
          type: string
        profile_picture:
          type: string
          format: binary
          nullable: true
        user_type:
          oneOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        terms_accepted:
          type: boolean
        profile_completed:
          type: boolean
        is_verified:
          type: boolean
        categories:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        recto_id:
          type: string
          format: binary
          writeOnly: true
        verso_id:
          type: string
          format: binary
          writeOnly: true
    ProducerPage:
      type: object
      description: Producer page serializer with category management
      properties:
        id:
          type: integer
          readOnly: true
        producer:
          type: integer
          readOnly: true
          title: Producteur
        producer_email:
          type: string
          format: email
          title: Email address
          readOnly: true
        producer_details:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        name:
          type: string
          title: Nom
          maxLength: 255
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        logo:
          type: string
          format: uri
        logo_url:
          type: string
          readOnly: true
        background_image:
          type: string
          format: uri
          title: Image de fond
        background_image_url:
          type: string
          readOnly: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          readOnly: true
        country:
          type: string
          title: Pays
          maxLength: 100
        address:
          type: string
          title: Adresse
        telephone:
          type: string
          title: Téléphone
          maxLength: 20
        city:
          type: string
          title: Ville
          maxLength: 100
        description:
          type: string
        is_validated:
          type: boolean
          readOnly: true
          title: Validé
        created_at:
          type: string
          format: date-time
          readOnly: true
          title: Date de création
        updated_at:
          type: string
          format: date-time
          readOnly: true
          title: Date de mise à jour
      required:
      - background_image_url
      - categories
      - created_at
      - id
      - is_validated
      - logo_url
      - producer
      - producer_details
      - producer_email
      - slug
      - updated_at
    ProducerPageRequest:
      type: object
      description: Producer page serializer with category management
      properties:
        name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 255
        logo:
          type: string
          format: binary
        background_image:
          type: string
          format: binary
          title: Image de fond
        category_ids:
          type: array
          items:
            type: integer
          writeOnly: true
          maxItems: 2
        country:
          type: string
          minLength: 1
          title: Pays
          maxLength: 100
        address:
          type: string
          minLength: 1
          title: Adresse
        telephone:
          type: string
          minLength: 1
          title: Téléphone
          maxLength: 20
        city:
          type: string
          title: Ville
          maxLength: 100
        description:
          type: string
    Product:
      type: object
      description: |-
        Sérialiseur pour les produits.

        Inclut des détails sur la page du producteur pour faciliter l'affichage.
        Vérifie également que seuls les propriétaires d'une page producteur peuvent
        ajouter des produits à cette page.
      properties:
        id:
          type: integer
          readOnly: true
        producer_page:
          type: integer
          title: Page producteur
        nom_page_producteur:
          type: string
          title: Nom
          readOnly: true
        details_producteur:
          type: string
          readOnly: true
        title:
          type: string
          title: Titre
          maxLength: 200
        description:
          type: string
        location:
          type: string
          title: Emplacement
          maxLength: 200
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          title: Prix
        quantity:
          type: string
          title: Quantité
          maxLength: 100
        image:
          type: string
          format: uri
        image_url:
          type: string
          readOnly: true
        is_valid:
          type: boolean
          readOnly: true
          title: Validé
        is_available:
          type: boolean
          title: Disponible
        published_at:
          type: string
          format: date-time
          readOnly: true
          title: Date de publication
        updated_at:
          type: string
          format: date-time
          readOnly: true
          title: Date de mise à jour
      required:
      - description
      - details_producteur
      - id
      - image_url
      - is_valid
      - location
      - nom_page_producteur
      - producer_page
      - published_at
      - title
      - updated_at
    ProductRequest:
      type: object
      description: |-
        Sérialiseur pour les produits.

        Inclut des détails sur la page du producteur pour faciliter l'affichage.
        Vérifie également que seuls les propriétaires d'une page producteur peuvent
        ajouter des produits à cette page.
      properties:
        producer_page:
          type: integer
          title: Page producteur
        title:
          type: string
          minLength: 1
          title: Titre
          maxLength: 200
        description:
          type: string
          minLength: 1
        location:
          type: string
          minLength: 1
          title: Emplacement
          maxLength: 200
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          title: Prix
        quantity:
          type: string
          title: Quantité
          maxLength: 100
        image:
          type: string
          format: binary
        is_available:
          type: boolean
          title: Disponible
      required:
      - description
      - location
      - producer_page
      - title
    Publication:
      type: object
      description: Publication serializer with like functionality
      properties:
        id:
          type: integer
          readOnly: true
        producer:
          type: integer
          readOnly: true
          nullable: true
          title: Producteur
        page:
          type: integer
          title: Page producteur
        page_name:
          type: string
          title: Nom
          readOnly: true
        title:
          type: string
          title: Titre
          maxLength: 255
        description:
          type: string
        location:
          type: string
          title: Emplacement
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Prix
        category:
          type: integer
          title: Catégorie
        category_name:
          type: string
          title: Nom
          readOnly: true
        picture:
          type: string
          format: uri
          title: Photo
        picture_url:
          type: string
          readOnly: true
        discussion_link:
          type: string
          title: Lien de discussion
          maxLength: 255
        date_posted:
          type: string
          format: date-time
          readOnly: true
          title: Date de publication
        is_valid:
          type: boolean
          readOnly: true
          title: Validé
        likes_count:
          type: string
          readOnly: true
        is_liked:
          type: string
          readOnly: true
      required:
      - category_name
      - date_posted
      - description
      - id
      - is_liked
      - is_valid
      - likes_count
      - location
      - page
      - page_name
      - picture_url
      - producer
    PublicationRequest:
      type: object
      description: Publication serializer with like functionality
      properties:
        page:
          type: integer
          title: Page producteur
        title:
          type: string
          title: Titre
          maxLength: 255
        description:
          type: string
          minLength: 1
        location:
          type: string
          minLength: 1
          title: Emplacement
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Prix
        category:
          type: integer
          title: Catégorie
        picture:
          type: string
          format: binary
          title: Photo
        discussion_link:
          type: string
          title: Lien de discussion
          maxLength: 255
      required:
      - description
      - location
      - page
    User:
      type: object
      description: Complete user serializer with all fields visible
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone:
          type: string
          maxLength: 15
        city:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        address:
          type: string
        description:
          type: string
        profile_picture:
          type: string
          format: uri
          nullable: true
        profile_picture_url:
          type: string
          readOnly: true
        user_type:
          oneOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        terms_accepted:
          type: boolean
        profile_completed:
          type: boolean
        date_joined:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        email_verified:
          type: boolean
          readOnly: true
        is_verified:
          type: boolean
        user_categories:
          type: string
          readOnly: true
        id_card_info:
          type: string
          readOnly: true
        favorites:
          type: string
          readOnly: true
      required:
      - date_joined
      - email
      - email_verified
      - favorites
      - id
      - id_card_info
      - is_active
      - profile_picture_url
      - user_categories
    UserRegistrationRequest:
      type: object
      description: User registration serializer - user_type can be set later
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone:
          type: string
          maxLength: 15
        city:
          type: string
          maxLength: 100
        user_type:
          oneOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        terms_accepted:
          type: boolean
        profile_picture:
          type: string
          format: binary
          nullable: true
      required:
      - email
      - password
      - password2
    UserRequest:
      type: object
      description: Complete user serializer with all fields visible
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        phone:
          type: string
          maxLength: 15
        city:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        address:
          type: string
        description:
          type: string
        profile_picture:
          type: string
          format: binary
          nullable: true
        user_type:
          oneOf:
          - $ref: '#/components/schemas/UserTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        terms_accepted:
          type: boolean
        profile_completed:
          type: boolean
        is_verified:
          type: boolean
        categories:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        recto_id:
          type: string
          format: binary
          writeOnly: true
        verso_id:
          type: string
          format: binary
          writeOnly: true
      required:
      - email
    UserTypeEnum:
      enum:
      - producer
      - consumer
      type: string
      description: |-
        * `producer` - Producer
        * `consumer` - Consumer
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
